import * as paths from "@mdi/js";
import fs from "fs";
import path from "path";
import pkg from "@mdi/js/package.json" with { type: "json" };

const __dirname = new URL('.', import.meta.url).pathname;
const librs = path.resolve(`${__dirname}/../crates/mdi/src/lib.rs`);

const ignore = [
  "__esModule",
  "default",
]

const filter = (name: string) => {
  return !ignore.includes(name);
}

const map_name = (name: string) => {
  if(name.startsWith("mdi")) {
    name = name.slice(3);
  }
 
  let target = `${name.charAt(0) ?? ""}`;
  for(let i = 1; i < name.length; i++) {
    const char = name.charAt(i);
    const upper = char.toUpperCase();
    if(char === upper) {
      target += "_";
    }
    target += upper;
  }

  return target;
}

// a map of all values, indexed by value so we deduplicate the repeated entries
const map = new Map<string, string>();

const lines = [];
for(const [name, path] of Object.entries(paths).sort(([a], [b]) => a.localeCompare(b))) {
  if(!filter(name)) continue;
  const existent = map.get(path as string);
  const const_name = map_name(name);
  if(existent != null) {
    lines.push(`pub const ${map_name(name)}: &str = ${existent};`);
  } else {
    map.set(path as string, const_name);
    lines.push(`pub const ${const_name}: &str = "${path}";`);
  }
}

const content = `\
// This file is automatically generated from the @mdi/js@${pkg.version} npm module do not edit manually
${lines.join("\n")}
`;

console.log(`Writing to lib.rs (${librs}) - ${lines.length} icons (${map.size} unique)`);

fs.writeFileSync(librs, content);
